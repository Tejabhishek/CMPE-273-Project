import os
import time
from nltk import ne_chunk, pos_tag, word_tokenize
from nltk.tree import Tree
import unicodedata    
import random
import pymysql
from slackclient import SlackClient
from PyDictionary import PyDictionary
dictionary=PyDictionary()



db = pymysql.connect(host="localhost",
                     user="root",
                     passwd="password",
                     db="chatbot")


cur = db.cursor()



# starterbot's ID as an environment variable
BOT_ID = os.environ.get("BOT_ID")

# constants
AT_BOT = "<@" + BOT_ID + ">"
EXAMPLE_COMMAND = "do"

# instantiate Slack & Twilio clients
slack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))

cur.execute("SELECT * FROM solutions where questions like '%teacher%'")
for row in cur.fetchall():
	m = row[0]
"""mentor info"""

z= ['professor','assistant','lecturer','tutor']
final1=[]

for i in z:
 list1=dictionary.synonym(i)
 list1 = [str(i).strip() for i in list1]

 final1.append(list1)
 
 """Greetings info"""
greetings= ['hi', 'how are you', 'hello', 'hi There', 'hey','hi', 'how are you', 'whats up?', 'greetings','good evening', 'goodday', 'hello']

#Instructor details

def handle_command(command, channel):
	if command not in greetings:
		for i in final1:
			print i
			for j in i:
				if j in command:
					print j
					if command in final1[0] or command in final1[1] or final1[2] or command in final1[3]  or command in final1[4] :
						
						cur.execute("SELECT * FROM solutions where questions like '%teacher%'")
						for row in cur.fetchall():
							response = row[1]
						
						
					else:
						response = ""
				else:
					response = ""
				slack_client.api_call("chat.postMessage", channel=channel,text=response, as_user=True)
#Greeting code
	elif command in greetings:
		cur.execute("SELECT * FROM solutions where questions like '%There%'")
		for row in cur.fetchall():
			response = row[1]
	else:
		response = ""
	slack_client.api_call("chat.postMessage", channel=channel,text=response, as_user=True)


def parse_slack_output(slack_rtm_output):
    """
        The Slack Real Time Messaging API is an events firehose.
        this parsing function returns None unless a message is
        directed at the Bot, based on its ID.
    """
    output_list = slack_rtm_output
    if output_list and len(output_list) > 0:
        for output in output_list:
            if output and 'text' in output and AT_BOT in output['text']:
                # return text after the @ mention, whitespace removed
                return output['text'].split(AT_BOT)[1].strip().lower(), \
                       output['channel']
    return None, None




def extract_candidate_chunks(text, grammar=r'KT: {(<JJ>* <NN.>+ <IN>)? <JJ> <NN.*>+}'):
    # exclude candidates that are stop words or entirely punctuation
    punct = set(string.punctuation)
    stop_words = set(nltk.corpus.stopwords.words('english'))
    # tokenize, POS-tag, and chunk using regular expressions
    chunker = nltk.chunk.regexp.RegexpParser(grammar)
    tagged_sents = nltk.pos_tag_sents(nltk.word_tokenize(sent) for sent in nltk.sent_tokenize(text))
    all_chunks = list(itertools.chain.from_iterable(nltk.chunk.tree2conlltags(chunker.parse(tagged_sent))
                                                    for tagged_sent in tagged_sents))
    # join constituent chunk words into a single chunked phrase
    candidates = [' '.join(word for word, pos, chunk in group).lower()
                  for key, group in itertools.groupby(all_chunks, lambda (word,pos,chunk): chunk != 'O') if key]
    return [cand for cand in candidates if cand not in stop_words and not all(char in punct for char in cand)]






if _name_ == "_main_":
    my_sent = "WASHINGTON -- In the wake of a string of abuses by New York police officers in the 1990s, Loretta E. Lynch, the top federal prosecutor in Brooklyn, spoke forcefully about the pain of a broken trust that African-Americans felt and said the responsibility for repairing generations of miscommunication and mistrust fell to law enforcement."
    my_sent = my_sent.lower()
    READ_WEBSOCKET_DELAY = 1 # 1 second delay between reading from firehose
    if slack_client.rtm_connect():
        print("StarterBot connected and running!")
        while True:
            command, channel = parse_slack_output(slack_client.rtm_read())
            if command and channel:
                handle_command(command, channel)
            time.sleep(READ_WEBSOCKET_DELAY)
    else:
        print("Connection failed. Invalid Slack token or bot ID?")
